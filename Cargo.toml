[package]
name    = "stc"
version = "0.1.0"
authors = ["Mitchell Tishmack <mitchell.tishmack@suse.com>"]
edition = "2018"
build   = "build.rs"

[lib]
name = "stc"
path = "src/lib.rs"

[[bin]]
name = "stc"
path = "src/stc.rs"

[dependencies]
anyhow        = "1.0"
chrono        = "0.4"
clap          = "2.33"
config        = { version = "0.10", features = ["toml"] }
data-encoding = "2.3"
digest        = "0.9"
dirs-next     = "2.0"
flate2        = "1.0"
hex           = "0.4"
indicatif     = "0.15"
ring          = "0.16"
rust-embed    = "5.8"
serde         = { version = "1.0", features = ["derive"] }
serde_derive  = "1.0"
serde_json    = "1.0"
serde_yaml    = "0.8"
sha2          = "0.9"
tar           = "0.4"
tokio         = { version = "1.1", features = ["macros", "fs", "io-util", "rt-multi-thread"] }
ureq          = { version = "1.5", features = ["json", "charset"] }
zip           = "0.5"

[build-dependencies]
vergen     = "3.0"
walkdir    = "2.0"
# Duplicated in dependencies above keep in sync
tar        = "0.4"
flate2     = "1.0"
rust-embed = "5.8"

# Release profile is optimized for output size. only "questionable" option is
# the panic setting imo, it kills the backtrace but reduces huge binary sizes
#
# a basic clap binary goes from about 1MiB to about 600k, so... seems worth it
#
# Most of the "bloat" here is going to be .text being format strings and whatnot.
# Example:
# $ nix-shell -p cargo -p cargo-bloat --run 'cargo bloat --release'
#     Finished release [optimized] target(s) in 0.02s
#     Analyzing target/release/stc

#  File  .text     Size     Crate Name
#  3.2%   5.9%  18.9KiB      clap clap::app::parser::Parser::get_matches_with
#  2.1%   3.9%  12.5KiB      clap clap::app::validator::Validator::validate
#  1.8%   3.3%  10.4KiB [Unknown] elf_add
#  1.7%   3.2%  10.2KiB      clap clap::app::help::Help::write_arg
#  1.6%   2.9%   9.2KiB [Unknown] dwarf_lookup_pc
#  1.3%   2.4%   7.6KiB       std __rdos_backtrace_dwarf_add
#  1.3%   2.3%   7.4KiB      clap clap::app::help::Help::_write_parser_help
#  1.1%   2.0%   6.4KiB      clap core::num::dec2flt::dec2flt
#  0.9%   1.7%   5.5KiB      clap clap::app::usage::get_required_usage_from
#  0.8%   1.4%   4.6KiB [Unknown] elf_zlib_inflate
#  0.7%   1.3%   4.0KiB       std rustc_demangle::v0::Printer::print_type
#  0.7%   1.2%   4.0KiB      clap clap::app::usage::create_help_usage
#  0.6%   1.2%   3.8KiB       std <backtrace::symbolize::SymbolName as core::fmt::Display>::fmt
#  0.6%   1.2%   3.8KiB      clap clap::app::help::Help::write_subcommands
#  0.6%   1.2%   3.7KiB     clap? <clap::app::parser::Parser as core::clone::Clone>::clone
#  0.6%   1.1%   3.5KiB       std rustc_demangle::try_demangle
#  0.6%   1.1%   3.4KiB [Unknown] read_function_entry
#  0.5%   0.9%   3.0KiB      clap clap::app::help::Help::write_all_args
#  0.5%   0.9%   2.9KiB       std std::sys_common::backtrace::output_filename
#  0.4%   0.8%   2.6KiB       stc stc::main
# 32.2%  59.3% 189.8KiB           And 1055 smaller methods. Use -n N to show more.
# 54.3% 100.0% 320.2KiB           .text section size, the file size is 589.5KiB
#
# Getting things much smaller than this isn't really worth it, this'll do for now.

[profile.release]
codegen-units = 1
lto           = true
opt-level     = 'z'
panic         = 'abort'
